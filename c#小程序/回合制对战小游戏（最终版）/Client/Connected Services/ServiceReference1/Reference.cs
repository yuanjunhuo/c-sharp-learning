//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="GameExample", ConfigurationName="ServiceReference1.IService1", CallbackContract=typeof(Client.ServiceReference1.IService1Callback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/Login")]
        void Login(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/Login")]
        System.Threading.Tasks.Task LoginAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/Loginout")]
        void Loginout(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/Loginout")]
        System.Threading.Tasks.Task LoginoutAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/SitDown")]
        void SitDown(string username, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/SitDown")]
        System.Threading.Tasks.Task SitDownAsync(string username, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/GetUp")]
        void GetUp(int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/GetUp")]
        System.Threading.Tasks.Task GetUpAsync(int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/Start")]
        void Start(string username, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/Start")]
        System.Threading.Tasks.Task StartAsync(string username, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/MakeOrder")]
        void MakeOrder(int index, int side, int Num, string skillname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/MakeOrder")]
        System.Threading.Tasks.Task MakeOrderAsync(int index, int side, int Num, string skillname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/Talk")]
        void Talk(int index, string userName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/Talk")]
        System.Threading.Tasks.Task TalkAsync(int index, string userName, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/ShowLogin")]
        void ShowLogin(string username, int maxtable);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/ShowLoginout")]
        void ShowLoginout(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/ShowTalk")]
        void ShowTalk(string userName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/UpdateTablesInfo")]
        void UpdateTablesInfo(string roominfo, int usercount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/ShowSitDown")]
        void ShowSitDown(string username, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/ShowGetUp")]
        void ShowGetUp(int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/ShowStart")]
        void ShowStart(int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/Gamestart")]
        void Gamestart();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/ShowOpertion")]
        void ShowOpertion(int side, bool finish);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/ShowResult")]
        void ShowResult(string Op1, string Op2, int hp1, int hp2, int mp1, int mp2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/Showmpnot")]
        void Showmpnot();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IService1/ShowWin")]
        void ShowWin(int iswin);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<Client.ServiceReference1.IService1>, Client.ServiceReference1.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(string username) {
            base.Channel.Login(username);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string username) {
            return base.Channel.LoginAsync(username);
        }
        
        public void Loginout(string username) {
            base.Channel.Loginout(username);
        }
        
        public System.Threading.Tasks.Task LoginoutAsync(string username) {
            return base.Channel.LoginoutAsync(username);
        }
        
        public void SitDown(string username, int index, int side) {
            base.Channel.SitDown(username, index, side);
        }
        
        public System.Threading.Tasks.Task SitDownAsync(string username, int index, int side) {
            return base.Channel.SitDownAsync(username, index, side);
        }
        
        public void GetUp(int index, int side) {
            base.Channel.GetUp(index, side);
        }
        
        public System.Threading.Tasks.Task GetUpAsync(int index, int side) {
            return base.Channel.GetUpAsync(index, side);
        }
        
        public void Start(string username, int index, int side) {
            base.Channel.Start(username, index, side);
        }
        
        public System.Threading.Tasks.Task StartAsync(string username, int index, int side) {
            return base.Channel.StartAsync(username, index, side);
        }
        
        public void MakeOrder(int index, int side, int Num, string skillname) {
            base.Channel.MakeOrder(index, side, Num, skillname);
        }
        
        public System.Threading.Tasks.Task MakeOrderAsync(int index, int side, int Num, string skillname) {
            return base.Channel.MakeOrderAsync(index, side, Num, skillname);
        }
        
        public void Talk(int index, string userName, string message) {
            base.Channel.Talk(index, userName, message);
        }
        
        public System.Threading.Tasks.Task TalkAsync(int index, string userName, string message) {
            return base.Channel.TalkAsync(index, userName, message);
        }
    }
}
